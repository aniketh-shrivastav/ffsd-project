<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Management | AutoCustomizer</title>
    <link href="/Css/CStyle.css" rel="stylesheet">
    <style>
 /* General Styles */
body {
    font-family: 'Poppins', sans-serif;
    background: linear-gradient(135deg, #f5f7fa, #c3cfe2); /* Subtle gradient background */
    color: #333;
    margin: 0;
    padding: 0;
    line-height: 1.6;
}

/* Google Fonts - moved to top for proper loading */
@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap');

header {
    background: linear-gradient(135deg, #6a11cb, #2575fc); /* Vibrant gradient */
    color: white;
    padding: 30px 20px;
    text-align: center;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    position: relative;
    overflow: hidden;
}

/* Add subtle pattern overlay to header */
header:before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-image: radial-gradient(circle at 25% 25%, rgba(255, 255, 255, 0.2) 2%, transparent 0%),
                      radial-gradient(circle at 75% 75%, rgba(255, 255, 255, 0.2) 2%, transparent 0%);
    background-size: 30px 30px;
    pointer-events: none;
}

header h1 {
    margin: 0;
    font-size: 2.5em;
    font-weight: 600;
    position: relative; /* For z-index to work */
    z-index: 1; /* Place above the overlay */
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
}

main {
    padding: 20px;
    max-width: 1200px;
    margin: 0 auto;
    margin-bottom: 80px; /* Add space for footer */
}

/* Full-width heading style for "Order Management" in the container */
.container h1 {
    background: linear-gradient(135deg, #5107a1, #2f74ec);
    color: rgb(56, 54, 54);
    padding: 15px 20px;
    margin: -20px -20px 30px -20px; /* Negative margin to make it full width */
    text-align: center;
    font-size: 2em;
    font-weight: 600;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    position: relative;
    text-transform: uppercase;
    letter-spacing: 1px;
    border-radius: 8px 8px 0 0;
}

/* Container styles to work with the full-width heading */
.container {
    background-color: white;
    border-radius: 12px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    padding: 20px;
    margin-top: 30px;
    overflow: hidden;
    position: relative;
}

/* Table Styles with Improved Background */
table {
    width: 100%;
    border-collapse: collapse;
    background: linear-gradient(to bottom, #93cae7, #accff1); /* Subtle gradient for table background */
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
}

th, td {
    padding: 15px;
    text-align: left;
    border-bottom: 1px solid #5c5c5c; /* Lighter border */
}

th {
    background: linear-gradient(135deg, #6a11cb, #7928ca);
    color: rgb(251, 251, 251);
    font-weight: 600;
    border: none;
}

/* Add slightly rounded corners to first and last table headers */
th:first-child {
    border-top-left-radius: 8px;
}

th:last-child {
    border-top-right-radius: 8px;
}

tr:hover {
    background-color: rgba(106, 17, 203, 0.05);
}

/* Every other row with subtle background for better readability */
tr:nth-child(even) {
    background-color: rgba(195, 207, 226, 0.15); /* Using a color from your body gradient */
}

tr:last-child td {
    border-bottom: none;
}

/* Status Badge */
.status {
    padding: 8px 14px;
    border-radius: 20px;
    font-weight: 500;
    display: inline-block;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.status.pending { 
    background-color: #FFC107; 
    color: #fff;
}

.status.shipped { 
    background-color: #2196F3; 
    color: #fff;
}

.status.delivered { 
    background-color: #4CAF50; 
    color: #fff;
}

/* Form Controls */
.form-inline {
    display: flex;
    gap: 10px;
    align-items: center;
    background-color: rgba(106, 17, 203, 0.05);
    padding: 15px;
    border-radius: 8px;
    margin-bottom: 20px;
}

select {
    padding: 8px 12px;
    border-radius: 6px;
    border: 1px solid #ddd;
    background-color: #f9f9f9;
    font-family: 'Poppins', sans-serif;
    transition: border-color 0.3s, box-shadow 0.3s;
}

select:focus {
    border-color: #6a11cb;
    outline: none;
    box-shadow: 0 0 0 3px rgba(106, 17, 203, 0.2);
}

.btn {
    background: linear-gradient(135deg, #6a11cb, #2575fc);
    color: white;
    border: none;
    padding: 8px 16px;
    cursor: pointer;
    border-radius: 6px;
    font-family: 'Poppins', sans-serif;
    font-weight: 500;
    transition: transform 0.2s, box-shadow 0.2s;
}

.btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
}

/* Stats Cards */
.stats {
    display: flex;
    justify-content: space-around;
    margin-bottom: 30px;
    flex-wrap: wrap;
    gap: 20px;
}

.card {
    background: linear-gradient(135deg, #6a11cb, #2575fc);
    border-radius: 12px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    padding: 25px;
    width: 30%;
    text-align: center;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    color: white;
    position: relative;
    overflow: hidden;
}

/* Add subtle pattern overlay to cards */
.card:before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-image: linear-gradient(45deg, rgba(255, 255, 255, 0.1) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.1) 50%, rgba(255, 255, 255, 0.1) 75%, transparent 75%, transparent);
    background-size: 5px 5px;
    pointer-events: none;
    opacity: 0.5;
}

.card:hover {
    transform: translateY(-10px);
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
}

.card h2 {
    margin-top: 0;
    font-size: 1.5em;
    font-weight: 600;
    position: relative;
}

.card p {
    font-size: 1.2em;
    margin: 10px 0;
    position: relative;
}

/* Empty state message */
.empty-message {
    text-align: center;
    color: #888;
    padding: 30px;
    font-style: italic;
    background-color: rgba(106, 17, 203, 0.03);
    border-radius: 8px;
    border: 1px dashed rgba(106, 17, 203, 0.2);
}

/* Footer Styles */
footer {
    background: linear-gradient(135deg, #6a11cb, #2575fc);
    color: white;
    text-align: center;
    padding: 15px;
    position: fixed;
    bottom: 0;
    width: 100%;
    box-shadow: 0 -4px 6px rgba(0, 0, 0, 0.1);
}

footer p {
    margin: 0;
    font-size: 1em;
    font-weight: 500;
}

/* Responsive adjustments */
@media (max-width: 768px) {
    .card {
        width: 100%;
    }
    
    .form-inline {
        flex-direction: column;
        align-items: stretch;
    }
    
    .stats {
        flex-direction: column;
    }
    
    .container h1 {
        margin: -20px -10px 20px -10px;
        padding: 15px 10px;
    }
}
    </style>
</head>
<body>

    <%- include('../partials/navbar') %>

    <div class="container">
        <h1>Order Management</h1>

        <table>
            <thead>
                <tr>
                    <th>Order ID</th>
                    <th>Customer Name</th>
                    <th>Product</th>
                    <th>Quantity</th>
                    <th>Status</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                <% if (orders && orders.length > 0) { %>
                    <% orders.forEach(order => { %>
                        <tr>
                            <td><%= order.id %></td>
                            <td><%= order.customerName %></td>
                            <td><%= order.product %></td>
                            <td><%= order.quantity %></td>
                            <td>
                                <span class="status <%= order.status.toLowerCase() %>">
                                    <%= order.status %>
                                </span>
                            </td>
                            <td>
                                <div class="form-inline">
                                    <select class="status-select">
                                        <option value="Pending" <%= order.status === 'Pending' ? 'selected' : '' %>>Pending</option>
                                        <option value="Shipped" <%= order.status === 'Shipped' ? 'selected' : '' %>>Shipped</option>
                                        <option value="Delivered" <%= order.status === 'Delivered' ? 'selected' : '' %>>Delivered</option>
                                    </select>
                                    <button type="button" class="btn update-status-btn">Update</button>
                                </div>
                            </td>
                        </tr>
                    <% }) %>
                <% } else { %>
                    <tr>
                        <td colspan="6" style="text-align: center; color: #888;">
                            No orders available.
                        </td>
                    </tr>
                <% } %>
            </tbody>
        </table>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Find all update buttons
            const updateButtons = document.querySelectorAll('.update-status-btn');
            
            // Add click event listener to each button
            updateButtons.forEach(button => {
                button.addEventListener('click', function() {
                    // Get the selected status from the dropdown
                    const row = this.closest('tr');
                    const statusSelect = row.querySelector('.status-select');
                    const newStatus = statusSelect.value;
                    
                    // Find the status element to update
                    const statusDisplay = row.querySelector('.status');
                    
                    // Remove all existing status classes
                    statusDisplay.classList.remove('pending', 'shipped', 'delivered');
                    
                    // Add the new status class
                    statusDisplay.classList.add(newStatus.toLowerCase());
                    
                    // Update the text content
                    statusDisplay.textContent = newStatus;
                });
            });
        });
    </script>
</body>
</html>